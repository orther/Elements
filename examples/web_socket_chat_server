#!/usr/bin/env python
#
# This file is part of Elements.
# Copyright (c) 2010 Sean Kerr. All rights reserved.
#
# The full license is available in the LICENSE file that was distributed with this source code.
#
# Author: Brandon Orther <brandon.orther@think-done.com>

import os
import sys
import time

sys.path.append(os.path.abspath("../lib"))

from elements.async.impl.web_socket import WebSocketClient
from elements.async.impl.web_socket import WebSocketServer

# ----------------------------------------------------------------------------------------------------------------------

WEB_SOCKET_MESSAGE_DELIMITER = "|"

# request codes
WEB_SOCKET_CHAT_REQ_CONN       = "1"
WEB_SOCKET_CHAT_REQ_CONN_CLOSE = "2"
WEB_SOCKET_CHAT_REQ_USER_MSG   = "40"

# response codes
WEB_SOCKET_CHAT_RSP_INVALID_MESSAGE     = "10"
WEB_SOCKET_CHAT_RSP_CONN_SUCCESS        = "20"
WEB_SOCKET_CHAT_RSP_CONN_USERNAME_TAKEN = "21"
WEB_SOCKET_CHAT_RSP_USER_LIST           = "30"
WEB_SOCKET_CHAT_RSP_USER_JOIN           = "31"
WEB_SOCKET_CHAT_RSP_USER_PART           = "32"
WEB_SOCKET_CHAT_RSP_USER_MSG            = "40"

# ----------------------------------------------------------------------------------------------------------------------

class WebSocketChatClient (WebSocketClient):

    def __init__ (self, *args):
        """
        Create a new WebSocketChatClient insatnce.
        """

        WebSocketClient.__init__(self, *args)

        self.username = None

    # ------------------------------------------------------------------------------------------------------------------

    def handle_dispatch (self):
        """
        Handle non-WebSocket http requests. For this example chat server we serve the html, css and js file here.
        """

        script_name  = self.in_headers.get("SCRIPT_NAME", "/")[1:]

        if not script_name:
            script_name = "web_socket_chat_server.html"

        if script_name[-4:] == ".css":
            # force mime type for css file
            self.content_type = "text/css"

        elif script_name[-3:] == ".js":
            # force mime type for css file
            self.content_type = "text/javascript"

        self.compose_headers()

        allowed_files = ("jquery.min.js", "web_socket_chat_server.html", "web_socket_chat_server.js",
                         "web_socket_chat_server.css")

        if script_name in allowed_files:
            # write file
            with open(script_name, "r") as f:
                self.write(f.read())
            f.closed

        # flush the response
        self.flush()

    # ------------------------------------------------------------------------------------------------------------------

    def handle_shutdown (self):
        """
        Remove user when they disconnect.
        """

        self._server.chat_remove_user(self.username)

        WebSocketClient.handle_shutdown(self)

    # ------------------------------------------------------------------------------------------------------------------

    def handle_web_socket_connect (self):
        """
        Return response header to complete the WebSocket handshake and begin connection.
        """

        if self.in_web_socket_protocol in ("Elements-test",):
            # compose the response
            self.compose_headers(self.in_web_socket_protocol)

            # flush the response
            self.flush()

        else:
            # Invalid protocol request
            raise HttpException("Bad Request", HTTP_400)

    # ------------------------------------------------------------------------------------------------------------------

    def handle_web_socket_message (self, message):
        """
        Handle an incoming WebSocket message.

        @param message (str)
        """

        message = message.split(WEB_SOCKET_MESSAGE_DELIMITER, 1)

        if not len(message) == 2:
            client.write_message(WEB_SOCKET_CHAT_INVALID_MESSAGE)

        elif self.username:
            self._server.chat_handle_message(self.username, message)

        else:
            if message[0] == WEB_SOCKET_CHAT_REQ_CONN:
                # create a chat connection
                self._server.chat_connect(self, message[1])

            else:
                # for now we jsut ignore messages from clients not connected to chat server
                #TODO: remove this print after test
                print "message ignored because username is not set", message

# ----------------------------------------------------------------------------------------------------------------------

class WebSocketChatServer (WebSocketServer):

    def __init__ (self, **kwargs):
        """
        Create a new WebSocketChatServer instance.
        """

        WebSocketServer.__init__(self, **kwargs)

        self._chat_users = {}

    # ------------------------------------------------------------------------------------------------------------------

    def chat_build_message (self, item_1, item_2, *args):
        """
        Build a web socket chat message string using WEB_SOCKET_MESSAGE_DELIMITER to seperate items.

        @param item_1 (str)
        @param item_2 (str)

        @return (str)
        """

        items = [item_1, item_2]

        # TODO: just check len and then merge
        for item in args:
            items.append(item)

        return WEB_SOCKET_MESSAGE_DELIMITER.join(items)

    # ------------------------------------------------------------------------------------------------------------------

    def chat_connect (self, client, username):
        """
        Connect a client to the chat.

        @param client_instance (WebSocketChatClient)
        @param username        (str)
        """

        if not username in self._chat_users:
            client.username            = username
            self._chat_users[username] = client

            # notify user they have successfully connected
            client.write_message(self.chat_build_message(WEB_SOCKET_CHAT_RSP_CONN_SUCCESS, username))
            client.write_message(self.chat_build_message(WEB_SOCKET_CHAT_RSP_USER_LIST, *self._chat_users.keys()))

            # notify other users a user has connected
            self.chat_message_to_all_users(self.chat_build_message(WEB_SOCKET_CHAT_RSP_USER_JOIN, username),
                                           (username,))

        else:
            # username already taken
            client.write_message(WEB_SOCKET_CHAT_RSP_CONN_USERNAME_TAKEN)

    # ------------------------------------------------------------------------------------------------------------------

    def chat_handle_message (self, username, message):
        """
        Handle an incoming message from a client.

        @param username (str)
        @param message  (list)
        """

        if username in self._chat_users:
            if message[0] == WEB_SOCKET_CHAT_REQ_CONN_CLOSE:
                print "CLOSE CONNECTION", message

            elif message[0] == WEB_SOCKET_CHAT_REQ_USER_MSG:
                send_msg = self.chat_build_message(WEB_SOCKET_CHAT_RSP_USER_MSG, username, message[1])

                self.chat_message_to_all_users(send_msg, (username,))

        else:
            # TODO: remove print and decide how to handle miss match.
            print "username not found in user list.", username, self._chat_users

    # ------------------------------------------------------------------------------------------------------------------

    def chat_message_to_all_users (self, message, exclude_users=None):
        """
        Send a message to all users. Any username passed in the optional exclude_users list param will not recieve the
        message.

        @param message       (str)
        @param exclude_users (tuple)
        """

        for username in self._chat_users:
            if not exclude_users or not username in exclude_users:
                self._chat_users[username].write_message(message)

    # ------------------------------------------------------------------------------------------------------------------

    def chat_remove_user (self, username):
        """
        Remove user from chat server user list.

        @param username (str)
        """

        if username in self._chat_users:
            self._chat_users.pop(username)

            self.chat_message_to_all_users(self.chat_build_message(WEB_SOCKET_CHAT_RSP_USER_PART, username))

    # ------------------------------------------------------------------------------------------------------------------

    def handle_client (self, client_socket, client_address, server_address):
        """
        Register a new WebSocketChatClient instance.
        """

        self.register_client(WebSocketChatClient(client_socket, client_address, self, server_address))

# ----------------------------------------------------------------------------------------------------------------------

# start the server
WebSocketChatServer(hosts=[("0.0.0.0", 8080)]).start()

