#!/usr/bin/env python
#
# This file is part of Elements.
# Copyright (c) 2010 Sean Kerr. All rights reserved.
#
# The full license is available in the LICENSE file that was distributed with this source code.
#
# Author: Brandon Orther <brandon.orther@think-done.com>

import os
import sys
import time

sys.path.append(os.path.abspath("../lib"))

from elements.async.impl.web_socket import WebSocketClient
from elements.async.impl.web_socket import WebSocketServer

# ----------------------------------------------------------------------------------------------------------------------

class ExampleClient (WebSocketClient):

    def handle_web_socket_connect (self):
        """
        Return response header to complete the WebSocket handshake and begin connection.
        """

        if self.in_web_socket_protocol in ("Elements-test",):
            # compose the response
            self.compose_headers(self.in_web_socket_protocol)

            # flush the response
            self.flush()

        else:
            # Invalid protocol request
            raise HttpException("Bad Request", HTTP_400)

    # ------------------------------------------------------------------------------------------------------------------

    def handle_web_socket_message (self, message):
        """
        Handle an incoming WebSocket message.

        @param message (str)
        """
        if message == "CONN_INFO":
            # Send connection info
            self.write_message("RESET|RESET")
            self.write_message("Client IP|%s"        % self._client_address[0])
            self.write_message("Client Port|%s"      % self._client_address[1])
            self.write_message("File Descriptor|%s"  % self._fileno)
            self.write_message("Last Access Time|%s" % self._last_access_time)

        elif message == "CUR_TIME":
            # Print current time
            self.write_message("Current Time|%s" % time.time())

        else:
            # Print message upper cased
            self.write_message("Upper Case|%s" % message.upper())

# ----------------------------------------------------------------------------------------------------------------------

class ExampleServer (WebSocketServer):

    def handle_client (self, client_socket, client_address, server_address):
        """
        Register a new ExampleClient instance.
        """

        self.register_client(ExampleClient(client_socket, client_address, self, server_address))

# ----------------------------------------------------------------------------------------------------------------------

# start the server
ExampleServer(hosts=[("0.0.0.0", 8080)]).start()

